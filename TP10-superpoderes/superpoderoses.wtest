import superpoderoses.*

describe "Superpoderoses" {

	const altaVelocidad = new Velocidad(rapidez = 2)
	const superVelocidad = new Velocidad(rapidez = 3)
	const vueloRasante = new Vuelo(alturaMaxima = 10, energiaDespegue = 10)
	const vueloAlto = new Vuelo(alturaMaxima = 300, energiaDespegue = 200)
	const vueloRasanteAmplificado = new PoderAmplificador(poderBase = vueloRasante, amplificador = 4)
	const superVelocidadAmplificada = new PoderAmplificador(poderBase = superVelocidad, amplificador = 3)
	
	const capitanaPatriaGrande = new Personaje(estrategia = 3, espiritualidad = 5, listaPoderes = [superVelocidadAmplificada, vueloAlto])
	const plusvaliaCero = new Personaje(estrategia = 2, espiritualidad = 4, listaPoderes = [altaVelocidad, vueloRasanteAmplificado])
	const usinaDeDerechos = new Personaje(estrategia = 1, espiritualidad = 6, listaPoderes = [vueloRasante]) 
	
	const cooperativaJusticiera = new Equipo(integrantes = #{capitanaPatriaGrande, plusvaliaCero, usinaDeDerechos})
	
	const peligroSencillo = new Peligro(capacidadDeBatalla = 30, radiactivo = false, complejidad = 1, heroesEnSimultaneo = 2)
	const peligroSencilloRadiactivo = new Peligro(capacidadDeBatalla = 30, radiactivo = true, complejidad = 1, heroesEnSimultaneo = 2)
	const peligroModerado = new Peligro(capacidadDeBatalla = 50, radiactivo = true, complejidad = 2, heroesEnSimultaneo = 1)
	const peligroAlto = new Peligro(capacidadDeBatalla = 400, radiactivo = true, complejidad = 3, heroesEnSimultaneo = 2)
	
	const fragmentadorMonopolios = new Metahumano(estrategia = 1, espiritualidad = 6, listaPoderes = [vueloRasante])
	const educadorPublico = new Mago(poderAcumulado = 12, estrategia = 1, espiritualidad = 6, listaPoderes = [vueloRasante])

	test "punto 1.1 capacidad de batalla que aporta un poder" {
		// TODO: Verificar que la capacidad de batalla que le aporta superVelocidadAmplificada a capitanaPatriaGrande es 576
		assert.equals(superVelocidadAmplificada.capacidadDeBatalla(capitanaPatriaGrande), 576)
		// TODO: Verificar que la capacidad de batalla que le aporta vueloAlto a capitanaPatriaGrande es 876
		assert.equals(vueloAlto.capacidadDeBatalla(capitanaPatriaGrande), 876)
		// TODO: Verificar que la capacidad de batalla que le aporta altaVelocidad a plusvaliaCero es 72
		assert.equals(altaVelocidad.capacidadDeBatalla(plusvaliaCero), 72)
		// TODO: Verificar que la capacidad de batalla que le aporta vueloRasanteAmplificado a plusvaliaCero es 144
		assert.equals(vueloRasanteAmplificado.capacidadDeBatalla(plusvaliaCero), 144)
		// TODO: Verificar que la capacidad de batalla que le aporta vueloRasante a usinaDeDerechos es 49
		assert.equals(vueloRasante.capacidadDeBatalla(usinaDeDerechos), 49)
	}

	test "punto 1.2 capacidad de batalla de un personaje" {
		// TODO: Verificar que la capacidad de batalla de capitanaPatriaGrande es 1452
		assert.equals(capitanaPatriaGrande.capacidadDeBatalla(), 1452)
		// TODO: Verificar que la capacidad de batalla de plusvaliaCero es 216
		assert.equals(plusvaliaCero.capacidadDeBatalla(), 216)
		// TODO: Verificar que la capacidad de batalla de usinaDeDerechos es 49
		assert.equals(usinaDeDerechos.capacidadDeBatalla(), 49)
	}

	test "punto 2.1 Saber el miembro vulnerable de un equipo" {
		// TODO: Verificar que miembro mas vulnerable de cooperativaJusticiera es usinaDeDerechos
		assert.equals(cooperativaJusticiera.miembroMasVulnerable(), usinaDeDerechos)
	}

	test "punto 2.2 Saber la calidad de un equipo" {
		// TODO: Verificar que la calidad de cooperativaJusticiera es 572.33333
		assert.equals(cooperativaJusticiera.calidad(), 572.33333)
	}

	test "punto 2.3 Saber los mejores poderes de un equipo" {
		// TODO: Verificar que los mejores poderes de cooperativaJusticiera son vueloAlto, vueloRasanteAmplificado y vueloRasante
		assert.equals(cooperativaJusticiera.mejoresPoderes(), #{vueloAlto, vueloRasanteAmplificado, vueloRasante})
	}

	test "punto 3.1 personajes contra el peligro" {
		// TODO: Verificar que peligroSencillo puede ser afrontado por capitanaPatriaGrande
		assert.that(peligroSencillo.puedeEnfrentarseIndividualmente(capitanaPatriaGrande))
		// TODO: Verificar que peligroSencillo puede ser afrontado por plusvaliaCero
		assert.that(peligroSencillo.puedeEnfrentarseIndividualmente(plusvaliaCero))
		// TODO: Verificar que peligroSencillo puede ser afrontado por usinaDeDerechos
		assert.that(peligroSencillo.puedeEnfrentarseIndividualmente(usinaDeDerechos))

		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por capitanaPatriaGrande
		assert.that(peligroSencilloRadiactivo.puedeEnfrentarseIndividualmente(capitanaPatriaGrande))
		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por plusvaliaCero
		assert.that(peligroSencilloRadiactivo.puedeEnfrentarseIndividualmente(plusvaliaCero))
		// TODO: Verificar que peligroSencilloRadiactivo NO puede ser afrontado por usinaDeDerechos
		assert.notThat(peligroSencilloRadiactivo.puedeEnfrentarseIndividualmente(usinaDeDerechos))

		// TODO: Verificar que peligroModerado puede ser afrontado por capitanaPatriaGrande
		assert.that(peligroModerado.puedeEnfrentarseIndividualmente(capitanaPatriaGrande))
		// TODO: Verificar que peligroModerado puede ser afrontado por plusvaliaCero
		assert.that(peligroModerado.puedeEnfrentarseIndividualmente(plusvaliaCero))
		// TODO: Verificar que peligroModerado NO puede ser afrontado por usinaDeDerechos
		assert.notThat(peligroModerado.puedeEnfrentarseIndividualmente(usinaDeDerechos))
	
		// TODO: Verificar que peligroAlto puede ser afrontado por capitanaPatriaGrande
		assert.that(peligroAlto.puedeEnfrentarseIndividualmente(capitanaPatriaGrande))
		// TODO: Verificar que peligroAlto NO puede ser afrontado por plusvaliaCero
		assert.notThat(peligroAlto.puedeEnfrentarseIndividualmente(plusvaliaCero))
		// TODO: Verificar que peligroAlto NO puede ser afrontado por usinaDeDerechos
		assert.notThat(peligroAlto.puedeEnfrentarseIndividualmente(usinaDeDerechos))
	}

	test "punto 3.2 Saber si un peligro es sensato " {
		// TODO: Verificar que peligroSencillo es sensato para cooperativaJusticiera
		assert.that(peligroSencillo.puedeEnfrentarseEnEquipo(cooperativaJusticiera))
		// TODO: Verificar que peligroSencilloRadiactivo NO es sensato para cooperativaJusticiera
		assert.notThat(peligroSencilloRadiactivo.puedeEnfrentarseEnEquipo(cooperativaJusticiera))
		// TODO: Verificar que peligroModerado NO es sensato para cooperativaJusticiera
		assert.notThat(peligroModerado.puedeEnfrentarseEnEquipo(cooperativaJusticiera))
		// TODO: Verificar que peligroAlto NO es sensato para cooperativaJusticiera
		assert.notThat(peligroAlto.puedeEnfrentarseEnEquipo(cooperativaJusticiera))
	}
	
	test "punto 4.1 Afrontar peligro individualmente: OK" {
		// TODO: Hacer que usinaDeDerechos afronte a peligroSencillo
		usinaDeDerechos.enfrentarPeligro(peligroSencillo)
		// TODO: Verificar que la estrategia de usinaDeDerechos es 2
		assert.equals(usinaDeDerechos.estrategia(), 2)
	}

	test "punto 4.1 Afrontar peligro individualmente: no OK por radioactividad" {
		// TODO: Hacer que usinaDeDerechos afronte a peligroSencilloRadiactivo (NO SE PUEDE!)
		usinaDeDerechos.enfrentarPeligro(peligroSencilloRadiactivo)
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
		assert.equals(usinaDeDerechos.estrategia(), 1)
	}
	
	test "punto 4.1 Afrontar peligro individualmente: no OK por capacidad de batalla" {
		// TODO: Hacer que usinaDeDerechos afronte a peligroModerado (NO SE PUEDE!)
		usinaDeDerechos.enfrentarPeligro(peligroModerado)
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
		assert.equals(usinaDeDerechos.estrategia(), 1)
	}
	
	test "punto 4.2  Afrontar peligro (moderado) en equipo  " {
		// TODO: Hacer que cooperativaJusticiera afronte a peligroModerado
		cooperativaJusticiera.enfrentarPeligro(peligroModerado)
		// TODO: Verificar que la estrategia de capitanaPatriaGrande es 5
		assert.equals(capitanaPatriaGrande.estrategia(), 5)
		// TODO: Verificar que la estrategia de plusvaliaCero es 4
		assert.equals(plusvaliaCero.estrategia(), 4)
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1		
		assert.equals(usinaDeDerechos.estrategia(), 1)
	}

	test "punto 4.2  Afrontar peligro (alto) en equipo (no ok)" {
		// TODO: Hacer que cooperativaJusticiera afronte a peligroAlto (NO SE PUEDE!)
		cooperativaJusticiera.enfrentarPeligro(peligroAlto)
		// TODO: Verificar que la estrategia de capitanaPatriaGrande es 3
		assert.equals(capitanaPatriaGrande.estrategia(), 3)
		// TODO: Verificar que la estrategia de plusvaliaCero es 2
		assert.equals(plusvaliaCero.estrategia(), 2)
		// TODO: Verificar que la estrategia de usinaDeDerechos es 1
		assert.equals(usinaDeDerechos.estrategia(), 1)
	}

	test "punto 5.1  Metahumano " {
		// TODO: Verificar que la capacidad de batalla de fragmentadorMonopolios es 98}
		assert.equals(fragmentadorMonopolios.capacidadDeBatalla(), 98)
		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por fragmentadorMonopolios
		assert.that(peligroSencilloRadiactivo.puedeEnfrentarseIndividualmente(fragmentadorMonopolios))
		// TODO: Hacer que fragmentadorMonopolios afronte a peligroSencilloRadiactivo
		fragmentadorMonopolios.enfrentarPeligro(peligroSencilloRadiactivo)
		// TODO: Verificar que la estrategia de fragmentadorMonopolios es 2
		assert.equals(fragmentadorMonopolios.estrategia(), 2)
		// TODO: Verificar que la espiritualidad de fragmentadorMonopolios es 7
		assert.equals(fragmentadorMonopolios.espiritualidad(), 7)
		// TODO: Verificar que peligroAlto NO puede ser afrontado por fragmentadorMonopolios
		assert.notThat(peligroAlto.puedeEnfrentarseIndividualmente(fragmentadorMonopolios))
		// TODO: Hacer que fragmentadorMonopolios afronte a peligroAlto (NO SE PUEDE!)
		fragmentadorMonopolios.enfrentarPeligro(peligroSencilloRadiactivo)
	}

	test "punto 5.2  Mago " {
		// TODO: Verificar que la capacidad de batalla de educadorPublico es 110
		assert.equals(educadorPublico.capacidadDeBatalla(), 110)
		// TODO: Verificar que peligroAlto NO puede ser afrontado por educadorPublico
		assert.notThat(peligroAlto.puedeEnfrentarseIndividualmente(educadorPublico))
		// TODO: Hacer que educadorPublico afronte a peligroAlto (NO SE PUEDE!)
		educadorPublico.enfrentarPeligro(peligroAlto)
		// TODO: Verificar que peligroSencilloRadiactivo puede ser afrontado por educadorPublico
		assert.that(peligroSencilloRadiactivo.puedeEnfrentarseIndividualmente(educadorPublico))
		// TODO: Hacer que educadorPublico afronte a peligroSencilloRadiactivo
		educadorPublico.enfrentarPeligro(peligroSencilloRadiactivo)
		// TODO: Verificar que la estrategia de educadorPublico es 2
		assert.equals(educadorPublico.estrategia(), 2)
		// TODO: Verificar que la espiritualidad de educadorPublico es 7
		assert.equals(educadorPublico.espiritualidad(), 7)
		// TODO: Verificar que el poder acumulado de educadorPublico es 7
		assert.equals(educadorPublico.poderAcumulado(), 7)
		// TODO: Hacer que educadorPublico afronte a peligroSencilloRadiactivo
		educadorPublico.enfrentarPeligro(peligroSencilloRadiactivo)
		// TODO: Verificar que la estrategia de educadorPublico es 2
		assert.equals(educadorPublico.estrategia(), 2)
		// TODO: Verificar que la espiritualidad de educadorPublico es 7
		assert.equals(educadorPublico.espiritualidad(), 7)
		// TODO: Verificar que el poder acumulado de educadorPublico es 2
		assert.equals(educadorPublico.poderAcumulado(), 2)
	}
}
