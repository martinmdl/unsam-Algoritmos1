import academia.*

describe "Academia de Magia" {
	// TODO: construir/obtener una cosa con volumen = 3, marca = cuchuflito, no es mágica ni una reliquia
	const pelota = new Cosa(volumen = 3, marca = cuchuflito, esMagico = false, esReliquia = false) 
	// TODO: construir/obtener una cosa con volumen = 4, marca = acme, es mágica y una reliquia
	const escoba = new Cosa(volumen = 4, marca = acme, esMagico = true, esReliquia = true)  
	// TODO: construir/obtener una cosa con volumen = 1, marca = fenix, es mágica pero no es una reliquia
	const varita = new Cosa(volumen = 1, marca = fenix, esMagico = true, esReliquia = false)
	// TODO: construir/obtener una cosa con volumen = 2, marca = acme, no es magica pero sí una reliquia
	const pava = new Cosa(volumen = 2, marca = acme, esMagico = false, esReliquia = true)
	// TODO: construir/obtener una cosa con volumen = 3, marca = fenix, es mágica y una reliquia
	const lampara = new Cosa(volumen = 3, marca = fenix, esMagico = true, esReliquia = true)
	 
	// TODO: construir/obtener un baúl con volumen máximo = 5 y la escoba dentro
	const baul = new Baul(volMax = 5, cosas = #{escoba})
	// TODO: construir/obtener un gabinete mágico con la varita dentro. El precio = 6 (segunda parte)
	const gabineteMagico = new Gabinete(cosas = #{varita}, precio = 6.0)
	// TODO: construir/obtener un armario con cantidad máxima = 2 y la pelota dentro
	const armario = new Armario(cantMax = 2, cosas = #{pelota}) 
	// TODO: construir/obtener una academia que tiene el baúl, el gabinete mágico y el armario
	const academia = new Academia(muebles = [baul, armario, gabineteMagico])

 	test "punto 1.1 saber si está guardado algo" {
		// TODO: Verificar que la varita está guardada en la academia
		assert.that(academia.estaGuardado(varita))
 		// TODO: Verificar que la pelota está guardada en la academia
 		assert.that(academia.estaGuardado(pelota))
 		// TODO: Verificar que la escoba está guardada en la academia
 		assert.that(academia.estaGuardado(escoba))
  		// TODO: Verificar que la pava NO está guardada en la academia
  		assert.notThat(academia.estaGuardado(pava))
 		// TODO: Verificar que la lámpara NO está guardada en la academia
 		assert.notThat(academia.estaGuardado(lampara))
 	}

	test "punto 1.2, saber en que mueble esta guardado algo" {
		// TODO: Verificar que el mueble donde se guarda la varita está es el gabinete mágico
		assert.equals(academia.dondeEstaGuardado(varita), gabineteMagico)
		// TODO: Verificar que el mueble donde se guarda la pelota está guardada es el armario
		assert.equals(academia.dondeEstaGuardado(pelota), armario)
 		// TODO: Verificar que el mueble donde se guarda la escoba está guardada es el baúl
 		assert.equals(academia.dondeEstaGuardado(escoba), baul)
 	}

 	test "punto 1.3, saber si se puede guardar algo" {
 		// TODO: Verificar que la varita NO se puede guardar en la academia
 		assert.notThat(academia.puedoGuardar(varita))
 		// TODO: Verificar que la pelota NO se puede guardar en la academia
 		assert.notThat(academia.puedoGuardar(pelota))
 		// TODO: Verificar que la escoba NO se puede guardar en la academia
 		assert.notThat(academia.puedoGuardar(escoba))
 		// TODO: Verificar que la pava se puede guardar en la academia
 		assert.that(academia.puedoGuardar(pava))
 		// TODO: Verificar que la lámpara se puede guardar en la academia
 		assert.that(academia.puedoGuardar(lampara))
		// TODO: Cambiar la capacidad del armario a 1
		armario.cantMax(1)
		// TODO: Verificar que ahora la pava NO se puede guardar en la academia
		assert.notThat(academia.puedoGuardar(pava))
 	}

 	test "punto 1.4 saber en que muebles se puede guardar algo" {
 		// TODO: Verificar que al preguntar en que muebles se puede guardar la pava se obtiene el armario
 		assert.equals(academia.dondePuedoGuardar(pava), [armario])
		// TODO: Verificar al preguntar en que muebles se puede guardar la lámpara se obtienen el armario y el gabinete mágico
 		assert.equals(academia.dondePuedoGuardar(lampara), [armario, gabineteMagico])
 	}

 	test "punto 1.5. guardar una cosa" {
 		// TODO: Guardar la pava en la academia
 		academia.guardar(pava)
 		// TODO: Verificar que la pava está guardada en la academia
 		assert.that(academia.estaGuardado(pava))
 		// TODO: Guardar la lámpara en la academia
 		academia.guardar(lampara)
 		// TODO: Verificar que la lámpara está guardada en la academia
 		assert.that(academia.estaGuardado(lampara))
 		// TODO: Guardar la escoba en la academia (NO SE PUEDE!)
 		// TODO: Guardar la pelota en la academia (NO SE PUEDE!)
 		// TODO: Guardar la varita en la academia (NO SE PUEDE!)
 		assert.throwsExceptionWithMessage("No se puede guardar", { academia.guardar(escoba) })
 		assert.throwsExceptionWithMessage("No se puede guardar", { academia.guardar(pelota) })
 		assert.throwsExceptionWithMessage("No se puede guardar", { academia.guardar(varita) })
 		// Verifico que la escoba, la pelota y la varita ya estaban guardadas en la academia
 		assert.that(academia.estaGuardado(escoba))
 		assert.that(academia.estaGuardado(pelota))
 		assert.that(academia.estaGuardado(varita))
 	}

 	test "punto 1.5 no poder guardar una cosa por culpa de que no hay mueble" {
 		// TODO: Cambiar la capacidad del armario a 1
 		armario.cantMax(1)
 		// TODO: Guardar la pava en la academia (NO SE PUEDE!)
 		assert.throwsExceptionWithMessage("No se puede guardar", { academia.guardar(pava) })
 		// TODO: Verificar que la pava NO está guardada en la academia
 		assert.notThat(academia.estaGuardado(pava))
 	}

 	test "punto 2.1 utilidad" {
 		// TODO: Guardar la pava en el armario
 		// (en el punto 1.4 vimos que solo se podia guardar en el armario)
 		academia.guardar(pava)
 		// TODO: Guardar la lámpara en el gabinete mágico
 		academia.guardar(lampara)
 		// TODO: construir/obtener un baúl mágico con volumen máximo = 12 y con la escoba y la lámpara dentro
 		const baulMagico = new BaulMagico(volMax = 12, cosas = #{escoba, lampara})
 		// TODO: Verificar que la utilidad del armario es 1.1
 		assert.equals(armario.utilidad(), 1.1)
 		// TODO: Verificar que la utilidad del ganibete mágico es 3
 		assert.equals(gabineteMagico.utilidad(), 3)
 		// TODO: Verificar que la utilidad del baúl es 4
 		assert.equals(baul.utilidad(), 4)
 		// TODO: Verificar que la utilidad del baúl mágico es 5
 		assert.equals(baulMagico.utilidad(), 5)
 	}

 	test "punto 2.2 cosas menos utiles" {
		// TODO: Guardar la pava en el armario
		academia.guardar(pava)
 		// TODO: Guardar la lámpara en el gabinete mágico
 		academia.guardar(lampara)
		// TODO: Verificar que las cosas menos útiles en la academia son la pelota, la varita y la escoba
		assert.equals(academia.menosUtiles(), #{pelota, varita, escoba})
 	}

  	test "punto 2.3 marca de cosa menos util" {
  		// TODO: Guardar la pava en el armario
  		academia.guardar(pava)
  		// TODO: Guardar la lámpara en el gabinete mágico
  		academia.guardar(lampara)
 		// TODO: Verificar que la marca menos útil de la academia es cuchuflito
 		assert.equals(academia.marcaMenosUtil(), cuchuflito)
 	}

  	test "punto 2.4 remover cosas menos utiles que no son magicas" {
//  	TODO: Guardar la pava en el armario
		academia.guardar(pava)
//		TODO: Guardar la lámpara en el gabinete mágico
		academia.guardar(lampara)
//  	TODO: Remover las cosas menos útiles de la academia que no son mágicas
		academia.removerCosasInutiles()
//  	TODO: Verificar que la varita está guardada en la academia
		assert.that(academia.estaGuardado(varita))
//  	TODO: Verificar que la pelota NO está guardada en la academia
		assert.notThat(academia.estaGuardado(pelota))
//  	TODO: Verificar que la escoba está guardada en la academia
		assert.that(academia.estaGuardado(escoba))
//  	TODO: Verificar que la pava está guardada en la academia
		assert.that(academia.estaGuardado(pava))
//  	TODO: Verificar que la lámpara está guardada en la academia
		assert.that(academia.estaGuardado(lampara))
  	}

  	test "punto 2.4 imposible remover cosas menos utiles que no son magicas" {
  		// TODO: Hacer que la academia tenga solamente el armario y el baúl
  		const academia2 = new Academia(muebles = [baul, armario])
  		// TODO: Remover las cosas menos útiles de la academia que no son mágicas (NO SE PUEDE!)
  		assert.throwsExceptionWithMessage("No hay nada para remover", { academia2.removerCosasInutiles() })
  		
  	}
}




